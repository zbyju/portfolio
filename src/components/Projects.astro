---
import { Github } from "lucide-astro";
import type { Project } from "../content/cv/projects";

interface Props {
  projects: Project[];
}

const { projects } = Astro.props;
const color = (size: "big" | "medium" | "small") => {
  const color = size === "big" ? "red" : size === "medium" ? "yellow" : "lime";
  return `bg-${color}-50 dark:bg-stone-920 border-l-${color}-400 border-r-${color}-300 border-t-${color}-300 border-b-${color}-300 dark:border-${color}-900`;
};
const width = (_: "big" | "medium" | "small") => {
  return "400";
};
---

<div class="masonry-grid" data-masonry='{ "itemSelector": ".masonry-item" }'>
  {
    projects
      .sort((a, b) => {
        const sizes = ["big", "medium", "small"];
        const ai = sizes.findIndex((x) => x === a.size) ?? 9_999_999_998;
        const bi = sizes.findIndex((x) => x === b.size) ?? 9_999_999_999;
        return ai - bi;
      })
      .filter((p) => p.show)
      .map((p) => (
        <div
          class={`warp-box masonry-item w-full overflow-hidden rounded-xl m-2 border-l-[3px] border-t border-b border-r transition duration-300 ${color(p.size)}`}
          style={`max-width: ${width(p.size)}px`}
        >
          <a href={p.blog}>
            <div class={`px-6 py-4`}>
              <div class="flex flex-wrap flex-row items-center gap-x-2">
                <h3 class="font-semibold text-3xl">{p.name}</h3>
                {p.github && (
                  <a href={p.github}>
                    <Github />
                  </a>
                )}
              </div>
              {p.context && <em class="text-lg leading-6">{p.context}</em>}
              <div class="mt-2 flex-grow" set:html={p.content} />
              <div class="mt-2">
                {p.keywords.map((keyword, index) => (
                  <>
                    <span>{keyword}</span>
                    {index !== p.keywords.length - 1 && <span> Â· </span>}
                  </>
                ))}
              </div>
            </div>
          </a>
        </div>
      ))
  }
</div>

<script>
  // @ts-expect-error masonry is not recognized
  import Masonry from "masonry-layout";
  // script.js
  const warpBoxes = document.querySelectorAll<HTMLElement>(".warp-box");
  warpBoxes.forEach((warpBox) => {
    warpBox.addEventListener("mousemove", (e: MouseEvent) => {
      const rect = warpBox.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const offsetX = ((x - rect.width / 2) / rect.width) * 2;
      const offsetY = ((y - rect.height / 2) / rect.height) * 2;
      warpBox.style.transform = `perspective(500px) rotateX(${offsetY * -2}deg) rotateY(${offsetX * 2}deg)`;
      warpBox.style.transitionDuration = "0.1s";
    });
    warpBox.addEventListener("mouseleave", () => {
      warpBox.style.transitionDuration = "1s";
      warpBox.style.transform =
        "perspective(500px) rotateX(0deg) rotateY(0deg)";
    });
  });
</script>
