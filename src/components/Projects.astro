---
import { Github } from "lucide-astro";
type Project = {
    name: string;
    github?: string;
    context?: string;
    keywords: string[];
    content: string;
    size: "big" | "medium" | "small";
    show?: boolean;
};
interface Props {
    projects: Project[];
}

const { projects } = Astro.props;
const color = (size: "big" | "medium" | "small") => {
    switch (size) {
        case "big":
            return "bg-red-50 border-red-400";
        case "medium":
            return "bg-yellow-50 border-yellow-400";
        case "small":
            return "bg-slate-50 border-slate-400";
    }
};
---

<div class="flex flex-wrap flex-row gap-4">
    {
        projects
            .sort((a, b) => {
                const sizes = ["big", "medium", "small"];
                const ai =
                    sizes.findIndex((x) => x === a.size) ?? 9_999_999_998;
                const bi =
                    sizes.findIndex((x) => x === b.size) ?? 9_999_999_999;
                return ai - bi;
            })
            .filter((p) => p.show)
            .map((p) => (
                <div
                    class={`warp-box w-[400px] flex flex-col border-l-[4px] px-6 py-4 transition duration-300 ${color(p.size)}`}
                >
                    <div class="flex flex-wrap flex-row items-center gap-x-2">
                        <h3 class="font-semibold text-3xl">{p.name}</h3>
                        {p.github && (
                            <a href={p.github}>
                                <Github />
                            </a>
                        )}
                    </div>

                    {p.context && (
                        <em class="text-lg leading-6">{p.context}</em>
                    )}

                    <div class="mt-2 flex-grow" set:html={p.content} />

                    <div class="mt-2">
                        {p.keywords.map((keyword, index) => (
                            <>
                                <span>{keyword}</span>
                                {index !== p.keywords.length - 1 && (
                                    <span> Â· </span>
                                )}
                            </>
                        ))}
                    </div>
                </div>
            ))
    }
</div>

<script>
    // script.js
    const warpBoxes = document.querySelectorAll<HTMLElement>(".warp-box");
    warpBoxes.forEach((warpBox) => {
        warpBox.addEventListener("mousemove", (e: MouseEvent) => {
            const rect = warpBox.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            const offsetX = ((x - rect.width / 2) / rect.width) * 2;
            const offsetY = ((y - rect.height / 2) / rect.height) * 2;
            warpBox.style.transform = `perspective(500px) rotateX(${offsetY * -2}deg) rotateY(${offsetX * 2}deg)`;
            warpBox.style.transitionDuration = "0.1s";
        });
        warpBox.addEventListener("mouseleave", () => {
            warpBox.style.transitionDuration = "1s";
            warpBox.style.transform =
                "perspective(500px) rotateX(0deg) rotateY(0deg)";
        });
    });
</script>
