---
import { Github, Linkedin } from "lucide-astro";
import Layout from "../layouts/Layout.astro";
import Button from "../components/Button.astro";
import { intervalToDuration, format } from "date-fns";
import Ctu from "../components/icons/ctu.astro";
import Tum from "../components/icons/tum.astro";
import Aalto from "../components/icons/aalto.astro";
import Spst from "../components/icons/spst.astro";

const work = [
  {
    job_title: "Fullstack Developer & System Administrator",
    company: "Náměšť nad Oslavou, MONTEL",
    country: "Czech Republic",
    workload: "Part Time",
    start: new Date(2018, 4),
    end: "Present",
    content: `<ul class="ml-8 list-disc">
    <li>Created key web applications for the <a href="https://en.wikipedia.org/wiki/Baby_hatch" class="underline">Babybox project</a> in Czechia:</li>
      <ol class="ml-8 list-decimal">
        <li>Designed and implemented a comprehensive application to gather, analyze, and visualize data from over 80 babyboxes, complete with real-time notifications and managing all babybox data and documents allowing for higher efficiency of the operational and maintenance staff</li>
        <li>Developed a monitoring panel tailored for hospital staff, providing real-time data and a live camera feed from a Babybox with focus on alerting to ensure safety of the babies</li>
        <li>Developed an application for tracking and managing potential donors for the project</li>
      </ol>

      <li>Collaborated directly with hospital staff and network administrators to ensure seamless integration of each Babybox into the hospital's network</li>
      <li>Created and managed the company's official website, focusing on accessibility, responsiveness, SEO optimization</li>
      <li>Managed the company's network and server infrastructure, ensuring high uptime and availability</li>
    `,
    keywords: [
      "TypeScript",
      "JavaScript",
      "Node.js",
      "Go",
      "Python",
      "React",
      "Vue.js",
      "Next.js",
      "Astro",
      "Docker",
      "MongoDB",
      "InfluxDB",
      "RabbitMQ",
    ],
  },
  {
    job_title: "Software Engineer",
    company: "GEM Systems",
    country: "Prague, Czech Republic",
    workload: "Internship",
    start: new Date(2020, 2),
    end: new Date(2021, 0),
    content: `<ul class="ml-8 list-disc">
  <li>Contributed to analysis and development processes for GEM Winch, a comprehensive data anonymization tool</li>
  <li>Designed and implemented a JavaFX-based user interface for a filesystem anonymization application, enabling intuitive file selection and configuration of anonymization parameters</li>
  <li>Engineered advanced anonymization functionalities for Excel files, allowing precise selection and anonymization of specific cells or ranges</li>
</ul>`,
    keywords: [
      "Groovy",
      "Java",
      "PostgreSQL",
      "Oracle SQL",
      "MySQL",
      "DB2",
      "JavaFX",
    ],
  },
  {
    job_title: "Web Designer",
    company: "Pedro Resina",
    country: "Montijo, Portugal",
    workload: "High School Internship",
    start: new Date(2017, 8),
    end: new Date(2017, 8),
    content: `<ul class="ml-8 list-disc">
<li>Focused on optimizing WordPress templates for improved responsiveness and user experience</li>
<li>These templates were successfully deployed for client websites, resulting in positive feedback</li>
      </ul>
    `,
    keywords: ["HTML", "CSS", "JavaScript", "Wordpress", "PHP"],
  },
];

const projects = [
  {
    name: "My Portfolio",
    github: "https://github.com/zbyju/portfolio",
    content: `<ul class="ml-5 list-disc">
      <li>Using Astro's island architecture to deliver a fast website</li>
    </ul>`,
    keywords: ["TypeScript", "Astro"],
  },
  {
    name: "Advent of Code",
    github: "https://github.com/zbyju/advent-of-code",
    content: `<ul class="ml-5 list-disc">
      <li>Trying to write performant advent of code solutions</li>
    </ul>`,
    keywords: ["Python", "Scala", "Go", "Rust"],
  },
  {
    name: "POB",
    github: "https://github.com/zbyju/pma-only-bot",
    content: `<ul class="ml-5 list-disc">
      <li>Modular Discord Bot</li>
      <li>Reacts to incoming user messages</li>
    </ul>`,
    keywords: ["TypeScript", "MongoDB"],
  },
  {
    name: "Quest for Nature",
    context: "Hackathon Team Project",
    github: "https://github.com/zbyju/dream-team-collabothon",
    content: `<ul class="ml-5 list-disc">
      <li>Google Hackathon winning solution for the #SustainableTomorrow
Challenge</li>
      <li>Application for tracking ESG score for personal use
    </ul>`,
    keywords: ["Next.js", "React", "PWA"],
  },
  {
    name: "Redis Clone",
    github: "https://github.com/zbyju/redis-go",
    content: `<ul class="ml-5 list-disc">
      <li>Implements some commands of the Redis protocol to concurrently handle incoming requests</li>
    </ul>`,
    keywords: ["Go"],
  },
  {
    name: "HTTP Server",
    github: "https://github.com/zbyju/http-server-go",
    content: `<ul class="ml-5 list-disc">
      <li>Supports concurrently handling requests and sending responses</li>
      <li>Is able to do header compressions using Gzip</li>
    </ul>`,
    keywords: ["Go"],
  },
  {
    name: "Git Clone",
    github: "https://github.com/zbyju/git-go",
    content: `<ul class="ml-5 list-disc">
      <li>Implements Git's plumbing commands to store and read blob, tree and commit objects</li>
    </ul>`,
    keywords: ["Go"],
  },
  {
    name: "Chesso",
    github: "https://github.com/zbyju/chesso",
    content: `<ul class="ml-5 list-disc">
      <li>Implementation of the game of chess in Scala</li>
      <li>Support creating a game and moving pieces</li>
    </ul>`,
    keywords: ["Scala"],
  },
  {
    name: "BoxJump",
    context: "School Project",
    github: "https://github.com/zbyju/boxjump",
    content: `<ul class="ml-5 list-disc">
      <li>Jump King inspired game that challenges the player to perfectly jump through the level</li>
      <li>It implements gravity, collisions, custom jump mechanic, different objects to interact with and more</li>
    </ul>`,
    keywords: ["TypeScript"],
  },
  {
    name: "Timeseries Benchmark",
    context: "School Project",
    github: "https://github.com/zbyju/timeseries-benchmark",
    content: `<ul class="ml-5 list-disc">
      <li>Complex benchmark for understanding the benefits of using different timeseries databases.</li>
      <li>The benchmark uses generated but realistic data from the IoT domain</li>
    </ul>`,
    keywords: ["TypeScript"],
  },
  {
    name: "Angry Patterns",
    context: "School Project",
    github: "https://github.com/zbyju/angrypatterns",
    content: `<ul class="ml-5 list-disc">
      <li>Angry birds inspired game for implementing different design patterns</li>
      <li>It supports different shooting modes, missile moving strategies, types of missiles, rewinding back in time</li>
    </ul>`,
    keywords: ["Scala", "ScalaFX"],
  },
  {
    name: "Point Cloud Tree Classifier",
    context: "School Team Project",
    content: `<ul class="ml-5 list-disc">
      <li>A model trained to classify types of trees based on their point cloud representation</li>
    </ul>`,
    keywords: ["Python", "SVM", "Logistic Regression"],
  },
  {
    name: "Geofencing Project",
    github: "https://github.com/zbyju/geofencing-research",
    context: "School Team Project",
    content: `<ul class="ml-5 list-disc">
      <li>Set a custom geofence on the map</li>
      <li>Track users inside the geofence</li>
      <li>Get the user's path, time, distance and speed inside the geofence</li>
    </ul>`,
    keywords: ["TypeScript", "Next.js", "React", "Geolocation API"],
  },
];

const education = [
  {
    icon: Ctu,
    institution: "Czech Technical University in Prague",
    country: "Czech Republic",
    degree: "Master's degree",
    program: "Computer Science - Web Engineering",
    start: new Date(2021, 7), // August 2021
    end: new Date(2024, 7), // August 2024
    content: `<ul class="ml-8 list-disc">
    <li class="font-medium">Thesis: Designed and implemented a PWA, Microservice application for remote monitoring, visualization, aggregations, notifications, and data analysis to deliver higher safety, efficiency and quality of service in maintaining the network of babyboxes across the Czech Republic (Go, TypeScript - React, Next.js, Bun, Python, MongoDB, InfluxDB, Docker, RabbitMQ, Traefik, Caddy)</li>
<li>Web technologies: TCP, HTTP, REST, SOAP, gRPC, SOA, microservices; Cloud computing: load balancers, virtualization, containerization, orchastration; Semantic web: RDF, SPARQL, Linked Data</li>
<li>Advanced database course: SQL evaluation and optimization, NoSQL databases (document, wide-column, key-value, XML, graph)</li>
<li>Applied functional programming: Haskell, Elm</li>
<li>Programming courses and software engineering: Design patterns, best practices, game development</li>
<li>Advanced parallel and distributed programming in C++ (OpenMP, MPI), interconnection networks, combinatorial optimization - strategies for solving NP-hard problems</li>
<li>Math: Advanced calculus, general algebra, advanced probability and statistics (hypothesis testing, information theory, Markov chains, Queueing theory)</li>
</ul>`,
    keywords: [
      "C++",
      "TypeScript",
      "JavaScript",
      "Scala",
      "Python",
      "Node.js",
      "React",
      "Docker",
      "PostgreSQL",
      "MongoDB",
      "Web technologies",
      "Cloud Computing",
      "Mutlimedia Retrieval",
      "Object-Oriented Programming",
      "Functional Programming",
      "Data Analysis",
      "Recommender Systems",
    ],
  },
  {
    icon: Tum,
    institution: "Technical University of Munich",
    country: "Germany",
    degree: "EuroTeQ Student",
    start: new Date(2024, 1),
    end: new Date(2024, 6),
    duration: "Feb 2024 - Jul 2024",
    content: `<ul class="ml-8 list-disc">
    <li>Engaged with founders, managers, and executives learning about their entrepreneurial journeys and strategies</li>
    <li>German language and culture</li>
</ul>`,
    keywords: ["Entrepreneurship", "German"],
  },
  {
    icon: Aalto,
    institution: "Aalto University",
    country: "Finland",
    degree: "Exchange student",
    program: "Computer Science",
    start: new Date(2022, 7),
    end: new Date(2023, 6),
    duration: "2022 - 2023",
    content: `<ul class="ml-8 list-disc">
  <li>Artificial Intelligence, Machine Learning, and Deep Learning Courses - Team project: Made a model to classify different types of trees based on their point cloud representation</li>
  <li>Fullstack development course, Web development course - Team project: Geofencing and tracking users' location to retrieve different metrics</li>
  <li>Parallel Programming - Instruction-level parallelism, vector-based programming, multi-threading, SIMD</li>
</ul>`,
    keywords: [
      "C++",
      "TypeScript",
      "Python",
      "React",
      "Next.js",
      "Microservices",
      "Artificial Intelligence",
      "Machine Learning",
      "Deep Learning",
      "Statistics",
      "Hypothesis Testing",
    ],
  },
  {
    icon: Ctu,
    institution: "Czech Technical University in Prague",
    country: "Czech Republic",
    degree: "Bachelor's degree",
    program: "Computer Science - Software Engineering",
    start: new Date(2018, 7), // 2018
    end: new Date(2021, 7), // 2021
    content: `<ul class="ml-8 list-disc">
    <li class="font-medium">Thesis: Developed a module for detecting plagiarism, including a React front-end for teachers to inspect and resolve plagiarism suspicions, and an improved plagiarism detection algorithm</li>
  <li>Programming, advanced algorithms, and data structures in C/C++; Object-Oriented Programming in C++, Java, Scala, Groovy.</li>
  <li>Relational databases, relational algebra and SQL (Oracle, PostgreSQL)</li>
  <li>Functional programming in Lambda Calculus, Lisp, Scala; Logical programming in Prolog</li>
  <li>Software Engineering, Conceptual Modeling, Process Modeling, Ontological modeling, UML, OntoUML</li>
  <li>Math courses: calculus, linear algebra, discrete math, probability and statistics, formal languages</li>
  <li>Hardware and programming microcontrollers, Arduino, FPGA - VHDL and Assembly</li>
</ul>`,
    keywords: [
      "C",
      "C++",
      "Java",
      "Scala",
      "Groovy",
      "SQL",
      "Lisp",
      "Prolog",
      "Docker",
      "Data Structures",
      "Algorithms",
      "Object-Oriented Programming",
      "Functional Programming",
      "Databases",
      "Computer Networks",
      "Software Engineering",
      "Requirements Engineering",
      "Calculus",
      "Linear Algebra",
      "Discrete Math",
      "Probability and Statistics",
      "Computer Hardware",
    ],
  },
  {
    icon: Spst,
    institution: "Technical High School Třebíč",
    country: "Czech Republic",
    program: "Computer Systems",
    start: new Date(2014, 7), // 2014
    end: new Date(2018, 7), // 2018
    content: `<ul class="ml-8 list-disc">
    <li class="font-medium">Final Project: Developed a Content Management System allowing users to manage blog posts, track view statistics, and customize themes and styling (Node.js)</li>
<li>Introduction to programming and algorithms, basics of object-oriented programming C++, C#</li>
<li>Basics of web design and development (HTML, CSS, JavaScript, PHP, MySQL)</li>
<li>Programming microcontrollers in C</li>
<li>PCB design and manufacturing</li>
</ul>`,
    keywords: [
      "C",
      "C++",
      "C#",
      "JavaScript",
      "PHP",
      "HTML",
      "CSS",
      "Microcontrollers",
    ],
  },
];

function displayDate(d: Date | string): string {
  if (typeof d === "string") return d;
  return format(d, "MMMM yyyy");
}

function displayDuration(d1: Date, d2: Date | string): string {
  if (typeof d2 === "string") d2 = new Date();
  const duration = intervalToDuration({
    start: d1,
    end: d2,
  });

  const { years, months } = duration;
  const yearsStr = displayDurationWord(years, "year");
  const monthsStr = displayDurationWord(months, "month");

  return yearsStr.length > 0 && monthsStr.length > 0
    ? `${yearsStr} and ${monthsStr}`
    : monthsStr.length === 0 && yearsStr.length === 0
      ? "1 month"
      : yearsStr.length === 0
        ? monthsStr
        : yearsStr;
}

function displayDurationWord(x: number | undefined, s: string): string {
  return x === 0 || x === undefined ? "" : x === 1 ? `${x} ${s}` : `${x} ${s}s`;
}
---

<Layout>
  <div class="h-full px-12" slot="hero">
    <div class="flex flex-row justify-between items-center gap-x-48 mt-24">
      <div class="flex flex-col gap-4">
        <span class="font-black text-6xl"
          ><span class="handwriting">Hello, I am Zbyněk Juřica</span></span
        >
        <span class="font-semibold text-3xl"
          >I'm a passionate Software Engineer who loves solving problems and
          creating impactful products using modern web technologies.</span
        >
        <div class="flex flex-row flex-wrap items-center gap-4">
          <Button text="Experience" link="#experience" />
          <Button text="Projects" link="#projects" />
          <Button text="Education" link="#education" />
          <a href="https://www.linkedin.com/in/zbyju/"><Linkedin /></a>
          <a href="https://github.com/zbyju"><Github /></a>
        </div>
      </div>
      <img
        src="portrait_placeholder.jpg"
        class="rounded-full border-text-800 border-[12px]"
        width="320"
      />
    </div>
  </div>

  <hr class="h-[2px] mx-auto rounded-xl w-1/4 mb-32 bg-black" />

  <div class="px-12 pb-12 bg-white pt-32 flex flex-col gap-y-32">
    <div class="md:w-3/4 w-full">
      <a id="experience"></a>
      <h2 class="font-bold text-6xl">Experience</h2>

      {
        work.map((w) => (
          <div class="border-l-4 border-yellow-400 pl-12 ml-1 mt-12">
            <div class="flex flex-wrap flex-row items-center gap-x-3">
              <h3 class="font-semibold text-3xl">{w.job_title}</h3>
              <span class="text-2xl pt-[3px]">—</span>
              <span class="text-2xl pt-[5px]">{w.country}</span>
            </div>

            <div class="flex flex-wrap flex-row items-center gap-x-2">
              <h4 class="text-xl font-medium leading-6">{w.company}</h4>
              <span class="text-lg leading-6">—</span>
              <em class="text-lg leading-6 pt-[2px]">{w.workload}</em>
            </div>
            <div class="text-xl font-medium">
              <span class="leading-7">
                {displayDate(w.start)} - {displayDate(w.end)}
              </span>
              <span class="leading-7">({displayDuration(w.start, w.end)})</span>
            </div>

            <div class="mt-2" set:html={w.content} />

            <div class="mt-2">
              {w.keywords.map((keyword, index) => (
                <>
                  <span>{keyword}</span>
                  {index !== w.keywords.length - 1 && <span> · </span>}
                </>
              ))}
            </div>
          </div>
        ))
      }
    </div>

    <hr class="h-[2px] mx-auto rounded-xl w-1/4 bg-black" />

    <div class="w-full">
      <a id="projects"></a>
      <h2 class="font-bold text-6xl">Projects</h2>

      <div class="mt-6 flex flex-row gap-4 flex-wrap">
        {
          projects.map((p) => (
            <div class="warp-box w-[400px] flex flex-col bg-secondary-300  px-6 py-4 rounded-md">
              <div class="flex flex-wrap flex-row items-center gap-x-2">
                <h3 class="font-semibold text-3xl">{p.name}</h3>
                {p.github && (
                  <a href={p.github}>
                    <Github />
                  </a>
                )}
              </div>

              {p.context && <em class="text-lg leading-6">{p.context}</em>}

              <div class="mt-2 flex-grow" set:html={p.content} />

              <div class="mt-2">
                {p.keywords.map((keyword, index) => (
                  <>
                    <span>{keyword}</span>
                    {index !== p.keywords.length - 1 && <span> · </span>}
                  </>
                ))}
              </div>
            </div>
          ))
        }
      </div>
    </div>

    <hr class="h-[2px] mx-auto rounded-xl w-1/4 bg-black" />

    <div class="md:w-3/4 w-full">
      <a id="education"></a>
      <h2 class="font-bold text-6xl">Education</h2>

      {
        education.map((e) => (
          <div class="border-l-4 border-yellow-400 pl-12 ml-1 mt-12">
            <div class="flex flex-wrap flex-row items-center gap-x-3">
              <span>{e.icon && <e.icon width="32px" />}</span>
              <h3 class="font-semibold text-3xl">{e.institution}</h3>
              <span class="text-2xl pt-[3px]">—</span>
              <span class="text-2xl pt-[5px]">{e.country}</span>
            </div>

            <div class="flex flex-wrap flex-row items-center gap-x-2">
              {e.program && (
                <h4 class="text-xl font-medium leading-6">{e.program}</h4>
              )}
              {e.program && e.degree && (
                <span class="text-lg leading-6">—</span>
              )}
              <em class="text-lg leading-6 pt-[2px]">{e.degree}</em>
            </div>
            <div class="text-xl font-medium">
              <span class="leading-7">
                {displayDate(e.start)} - {displayDate(e.end)}
              </span>
              <span class="leading-7">({displayDuration(e.start, e.end)})</span>
            </div>

            {/* <div class="mt-2" set:html={e.content} /> */}

            <div class="mt-2">
              {e.keywords.map((keyword, index) => (
                <>
                  <span>{keyword}</span>
                  {index !== e.keywords.length - 1 && <span> · </span>}
                </>
              ))}
            </div>
          </div>
        ))
      }
    </div>
  </div>
</Layout>

<script>
  // script.js
  const warpBoxes = document.querySelectorAll(".warp-box");

  warpBoxes.forEach((warpBox) => {
    warpBox.addEventListener("mousemove", (e) => {
      const rect = warpBox.getBoundingClientRect();
      const x = e.clientX - rect.left; // Get the horizontal coordinate
      const y = e.clientY - rect.top; // Get the vertical coordinate

      const offsetX = ((x - rect.width / 2) / rect.width) * 2; // Normalize to [-1, 1]
      const offsetY = ((y - rect.height / 2) / rect.height) * 2; // Normalize to [-1, 1]

      warpBox.style.transform = `perspective(500px) rotateX(${offsetY * -2}deg) rotateY(${offsetX * 2}deg)`;
    });

    warpBox.addEventListener("mouseleave", () => {
      warpBox.style.transform =
        "perspective(500px) rotateX(0deg) rotateY(0deg)";
    });
  });
</script>
